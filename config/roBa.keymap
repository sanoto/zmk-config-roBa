//#include <layout_shift.dtsi>

#include <input/processors.dtsi>
#include <behaviors/naginata.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&zip_temp_layer {
    //    excluded-positions = <
    //        18 // T (J)
    //        19 // N (K)
    //        20 // S (L)
    //        27 // LShift / (
    //        28 // RShift / )
    //        34 // Ctrl
    //        35 // Win
    //        36 // Alt
    //    >;

    require-prior-idle-ms = <200>;
};

&trackball {
    //    automouse-layer = <6>;
    //    scroll-layers = <7>;
    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

&trackball_listener { input-processors = <&zip_temp_layer 9 100000>; };

&mkp_input_listener { input-processors = <&zip_temp_layer 9 100000>; };

/ {
    combos {
        compatible = "zmk,combos";

        toggle-classic-layer {
            bindings = <&tog 1>;
            key-positions = <39 37>;
            layers = <0 1>;
        };

        ng_activate {
            bindings = <&ng_activate>;
            key-positions = <18 19>;
            layers = <0 1 4 2 3>;
        };

        ng_deactivate {
            bindings = <&ng_deactivate>;
            key-positions = <13 12>;
            layers = <0 1 4 2 3>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        ng_activate: ng_activate {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&tog_on 2 &tog_on 3 &kp LANGUAGE_1>;

            label = "NG_ACTIVATE";
        };

        ng_deactivate: ng_deactivate {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&tog_off 3 &tog_off 2 &kp LANGUAGE_2>;

            label = "NG_DEACTIVATE";
        };

        m_off: m_off {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&tog_off 5 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "M_OFF";
        };

        ng_on: ng_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&tog_on 3 &kp LANGUAGE_1>;

            label = "NG_ON";
        };

        ng_off: ng_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&tog_off 3 &kp LANGUAGE_2>;

            label = "NG_OFF";
        };

        m_off_ng_on: m_off_ng_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&tog_off 5 &tog_on 3 &kp LANGUAGE_1>;

            label = "M_OFF_NG_ON";
        };

        m_off_ng_off: m_off_ng_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&tog_off 5 &tog_off 3 &kp LANGUAGE_2>;

            label = "M_OFF_NG_OFF";
        };
    };

    behaviors {
        // Keep the original key_press behavior for ZMK core components
        // https://github.com/kot149/zmk-layout-shift
        //        original_key_press: original_key_press {
        //            compatible = "zmk,behavior-key-press";
        //            #binding-cells = <1>;
        //            label = "KEY_PRESS";
        //        };
        // Override the existing &kp behavior to use our custom implementation
        // https://github.com/kot149/zmk-layout-shift
        //        kp: key_press {
        //            compatible = "zmk,behavior-layout-shift-key-press";
        //            #binding-cells = <1>;
        //            label = "LAYOUT_SHIFT_KEY_PRESS";
        //        };

        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tog_on: tog_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "TOG_ON";
            #binding-cells = <1>;
        };

        tog_off: tog_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "TOG_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        lt_ng_off: lt_ng_off {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_NG_OFF";
            bindings = <&mo>, <&ng_off>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_ng_on: lt_ng_on {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_NG_ON";
            bindings = <&mo>, <&ng_on>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_quick: lt_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_QUICK";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
        };

        lt_m_off_ng_on: lt_m_off_ng_on {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_M_OFF_NG_ON";
            bindings = <&mo>, <&m_off_ng_on>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        lt_m_off_ng_off: lt_m_off_ng_off {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_M_OFF_NG_OFF";
            bindings = <&mo>, <&m_off_ng_off>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp L         &kp U         &kp COMMA       &kp DOT                                                         &kp F                  &kp W  &kp R  &kp Y  &kp P
&kp E      &kp I         &kp A         &kp O           &kp MINUS             &kp LS(LG(S))      &kp ESCAPE             &kp K                  &kp T  &kp N  &kp S  &kp H
&kp Z      &kp X         &kp C         &kp V           &kp APOS              &lt 9 TAB          &mt RCTRL SLASH        &kp G                  &kp D  &kp M  &kp J  &kp B
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt_ng_off 8 0  &mt LEFT_SHIFT SPACE  &lt_ng_on 6 0      &lt_quick 7 BACKSPACE  &mt RIGHT_SHIFT ENTER                       &mt RIGHT_ALT BACKSLASH
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        classic_layer {
            bindings = <
&kp Q   &kp W   &kp E   &kp R   &kp T                       &kp Y   &kp U  &kp I      &kp O    &kp P
&kp A   &kp S   &kp D   &kp F   &kp G   &trans      &trans  &kp H   &kp J  &kp K      &kp L    &kp MINUS
&kp Z   &kp X   &kp C   &kp V   &kp B   &trans      &trans  &kp N   &kp M  &kp COMMA  &kp DOT  &kp SINGLE_QUOTE
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                             &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        naginata_activation_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        naginata_on_off_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        naginata_layer {
            bindings = <
&ng Q   &ng W   &ng E   &ng R   &ng T                          &ng Y      &ng U  &ng I      &ng O    &ng P
&ng A   &ng S   &ng D   &ng F   &ng G      &trans      &trans  &ng H      &ng J  &ng K      &ng L    &ng SEMI
&ng Z   &ng X   &ng C   &ng V   &ng B      &trans      &trans  &ng N      &ng M  &ng COMMA  &ng DOT  &ng FSLH
&trans  &trans  &trans  &trans  &ng SPACE  &trans      &trans  &ng ENTER                             &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &msc SCRL_UP    &none     &none     &none            &none
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &msc SCRL_LEFT  &mkp MB1  &mkp MB2  &msc SCRL_RIGHT  &none
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &msc SCRL_DOWN  &none     &none     &none            &none
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                               &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM {
            bindings = <
&kp PERCENT  &kp N7  &kp N8  &kp N9  &kp PLUS                                           &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPERSAND   &kp PIPE         &kp AT_SIGN
&kp EQUAL    &kp N4  &kp N5  &kp N6  &kp ASTERISK  &trans              &kp TILDE        &kp EXCLAMATION       &kp QUESTION           &kp COLON       &kp SEMICOLON    &kp HASH
&kp N0       &kp N1  &kp N2  &kp N3  &kp GRAVE     &kp LEFT_SHIFT      &kp RIGHT_SHIFT  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp DOLLAR
&trans       &trans  &trans  &trans  &trans        &none               &kp DELETE       &trans                                                                        &kp CARET
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &msc SCRL_UP    &kp LC(LEFT_ARROW)  &kp UP_ARROW    &kp LC(RIGHT_ARROW)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp HOME        &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp END
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &msc SCRL_DOWN  &trans              &trans          &trans               &trans
&trans  &trans  &trans  &trans  &trans  &trans      &none   &trans                                                                   &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION {
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4  &kp F5                       &trans  &trans  &trans  &trans  &trans
&kp F6   &kp F7   &kp F8   &kp F9  &kp F10  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp F11  &kp F12  &kp F13  &trans  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans   &trans   &none   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        BLUETOOTH {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                              &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &bt BT_CLR    &trans        &bt BT_CLR_ALL      &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &none               &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans              &trans  &trans                          &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        naginata {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
