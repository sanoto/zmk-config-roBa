#include <input/processors.dtsi>
#include <layout_shift.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&zip_temp_layer {
    excluded-positions = <
        18 // T (J)
        19 // N (K)
        20 // S (L)
        27 // LShift / (
        28 // RShift / )
        34 // Ctrl
        35 // Win
        36 // Alt
    >;

    require-prior-idle-ms = <200>;
};

&trackball {
    //    automouse-layer = <6>;

    scroll-layers = <7>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

&trackball_listener { input-processors = <&zip_temp_layer 6 100000>; };

&mkp_input_listener { input-processors = <&zip_temp_layer 6 250>; };

/ {
    combos {
        compatible = "zmk,combos";

        toggle-classic-layer {
            bindings = <&tog 1>;
            key-positions = <37 38>;
            layers = <0 1>;
        };

        ng_on {
            bindings = <&ng_on>;
            key-positions = <18 19>;
            layers = <0 1 2>;
        };

        ng_off {
            bindings = <&ng_off>;
            key-positions = <13 12>;
            layers = <0 1 2>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 3 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        ng_on: ng_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &tog_on 2>;
            label = "NG_ON";
        };

        ng_off: ng_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &to 2>;
            label = "NG_OFF";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tog_on: tog_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "TOG_ON";
            #binding-cells = <1>;
        };

        tog_off: tog_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "TOG_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        // Keep the original key_press behavior for ZMK core components
        // https://github.com/kot149/zmk-layout-shift

        original_key_press: original_key_press {
            compatible = "zmk,behavior-key-press";
            #binding-cells = <1>;
            label = "KEY_PRESS";
        };

        // Override the existing &kp behavior to use our custom implementation
        // https://github.com/kot149/zmk-layout-shift

        kp: key_press {
            compatible = "zmk,behavior-layout-shift-key-press";
            #binding-cells = <1>;
            label = "LAYOUT_SHIFT_KEY_PRESS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp L         &kp U         &kp COMMA    &kp DOT                                                                              &kp F          &kp W  &kp R  &kp Y  &kp P
&kp E      &kp I         &kp A         &kp O        &kp MINUS    &kp LS(LG(S))                        &kp TAB                            &kp K          &kp T  &kp N  &kp S  &kp H
&kp Z      &kp X         &kp C         &kp V        &kp APOS     &mt LEFT_SHIFT LEFT_PARENTHESIS      &mt RIGHT_SHIFT RIGHT_PARENTHESIS  &kp G          &kp D  &kp M  &kp J  &kp B
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt 7 LANG2  &lt 5 LANG1  &lt 3 SPACE                          &lt 4 ENTER                        &kp BACKSPACE                       &kp ESCAPE
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        classic_layer {
            bindings = <
&kp Q   &kp W   &kp E   &kp R   &kp T                       &kp Y   &kp U  &kp I      &kp O    &kp P
&kp A   &kp S   &kp D   &kp F   &kp G   &trans      &trans  &kp H   &kp J  &kp K      &kp L    &kp MINUS
&kp Z   &kp X   &kp C   &kp V   &kp B   &trans      &trans  &kp N   &kp M  &kp COMMA  &kp DOT  &kp SINGLE_QUOTE
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                             &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        naginata_layer {
            bindings = <
&ng Q   &ng W   &ng E   &ng R   &ng T                             &ng Y   &ng U  &ng I      &ng O    &ng P
&ng A   &ng S   &ng D   &ng F   &ng G   &trans         &trans     &ng H   &ng J  &ng K      &ng L    &ng SEMI
&ng Z   &ng X   &ng C   &ng V   &ng B   &ng SPACE      &ng ENTER  &ng N   &ng M  &ng COMMA  &ng DOT  &ng FSLH
&trans  &trans  &trans  &trans  &trans  &trans         &trans     &trans                             &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        NUM {
            bindings = <
&kp PERCENT      &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                           &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp GRAVE      &kp TILDE      &kp AT_SIGN
&kp EQUAL        &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS     &trans                    &kp LA(TAB)                &kp EXCLAMATION   &kp QUESTION       &kp AMPERSAND  &kp PIPE       &kp HASH
&kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp ASTERISK  &mt LEFT_SHIFT SLASH      &mt RIGHT_SHIFT BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp COLON      &kp SEMICOLON  &kp DOLLAR
&trans           &trans           &trans           &trans           &trans        &none                     &trans                     &kp DELETE                                                         &kp CARET
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                          &kp F1   &kp F2   &kp F3   &kp F4  &kp F5
&trans        &trans        &trans        &trans        &trans        &bt BT_CLR      &trans  &kp F6   &kp F7   &kp F8   &kp F9  &kp F10
&trans        &trans        &trans        &trans        &trans        &trans          &trans  &kp F11  &kp F12  &kp F13  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans          &trans  &none                              &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &none    &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };
    };
};
